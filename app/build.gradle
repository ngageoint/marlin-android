import org.ajoberstar.grgit.Grgit

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
//    id 'com.google.devtools.ksp' version '1.9.22-1.0.16'
    id 'com.google.dagger.hilt.android'
    id 'kotlin-parcelize'
    id 'kotlinx-serialization'
    id 'com.google.protobuf'
    id 'org.ajoberstar.grgit' version libs.versions.grgit
}

group libs.versions.applicationId.get()
version '1.5.0'

def googleMapsApiReleaseKey = hasProperty('MSI_RELEASE_MAPS_API_KEY') ? MSI_RELEASE_MAPS_API_KEY : ''
def googleMapsApiDebugKey = hasProperty('MSI_DEBUG_MAPS_API_KEY') ? MSI_DEBUG_MAPS_API_KEY : ''

def room_version = '2.6.1'
def work_version = '2.10.0'
def compose_version = '1.7.8'
def retrofit_version = '2.9.0'
def accompanist_version = '0.34.0'

android {
    compileSdk libs.versions.compileSdk.get().toInteger()
    namespace libs.versions.applicationId.get()

    defaultConfig {
        ext.repo = Grgit.open(currentDir: project.rootDir)

        applicationId libs.versions.applicationId.get()
        minSdk libs.versions.minSdk.get().toInteger()
        targetSdk libs.versions.targetSdk.get().toInteger()
        versionName project.version
        versionCode ext.repo.log().size() as int

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas")
            }
        }

        signingConfigs {
            release {
                if (project.hasProperty('MSI_KEYSTORE')) {
                    storeFile file(MSI_KEYSTORE)
                    storePassword MSI_KEYSTORE_PASSWORD
                    keyAlias MSI_KEY_ALIAS
                    keyPassword MSI_KEY_PASSWORD
                }
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            minifyEnabled false
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            resValue "string", "GOOGLE_MAPS_ANDROID_API_KEY", googleMapsApiDebugKey
            resValue "string", "applicationId", defaultConfig.applicationId + applicationIdSuffix
        }
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "GOOGLE_MAPS_ANDROID_API_KEY", googleMapsApiReleaseKey
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    packagingOptions {
        resources {
            excludes += "META-INF/INDEX.LIST"
            merges += "META-INF/LICENSE.md"
            merges += "META-INF/LICENSE-notice.md"
        }
    }

    kotlin {
        jvmToolchain(libs.versions.jvmToolchain.get().toInteger())
    }

    kotlinOptions {
        jvmTarget = libs.versions.jvmTarget.get()
        freeCompilerArgs = ["-Xcontext-receivers"]
    }

    buildFeatures {
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = libs.versions.kotlinCompilerExtensionVersion.get()
    }

    protobuf {
        protoc {
            artifact = 'com.google.protobuf:protoc:3.23.0'
        }

        plugins {
            javalite {
                // The codegen for lite comes as a separate artifact
                artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
            }

            kotlinlite {
                artifact = 'com.google.protobuf:protoc-gen-kotlinlite:3.0.0'
            }
        }

        // Generates the java Protobuf-lite code for the Protobufs in this project. See
        // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
        // for more information.
        generateProtoTasks {
            all().each { task ->
                task.builtins {
                    java {
                        option 'lite'
                    }
                    kotlin {
                        option 'lite'
                    }
                }
            }
        }
    }

    sourceSets {
        main {
            assets {
                srcDirs 'src/main/assets'
            }
        }
        androidTest {
            assets {
                srcDirs 'src/androidTest/assets'
            }
        }
    }
}

dependencies {
    implementation libs.dagger.hilt.android
    implementation libs.hilt.navigation.compose
    kapt libs.dagger.hilt.compiler
    implementation libs.hilt.work
    kapt libs.hilt.kapt.compiler
    annotationProcessor libs.hilt.annotation.compiler

    implementation libs.room.ktx
    implementation libs.room.runtime
    annotationProcessor libs.room.annotation.compiler
    kapt libs.room.kapt
    implementation libs.room.paging

    implementation libs.retrofit
    implementation libs.retrofit.gson

    implementation libs.tickaroo.annotation
    implementation libs.tickaroo.core
    kapt libs.tickaroo.kapt.processor
    implementation libs.tickaroo.retrofit.converter

    implementation libs.work.runtim.ktx

    implementation libs.startup.runtime

    implementation libs.kotlinx.serialization.json

    implementation libs.core.ktx
    implementation libs.compose.ui
    implementation libs.compose.material3
    implementation libs.compose.material
    implementation libs.compose.ui.tooling.preview
    implementation libs.compose.material.icons
    implementation libs.compose.runtime.livedata
    implementation libs.lifecycle.runtime.ktx
    implementation libs.lifecycle.runtime.compose
    implementation libs.lifecycle.viewmodel.compose
    implementation libs.lifecycle.service
    implementation libs.lifecycle.livedata.ktx
    implementation libs.lifecycle.viewmodel.ktx
    implementation libs.activity
    implementation libs.navigation.compose
    implementation libs.navigation.fragment.ktx
    implementation libs.navigation.ui.ktx
    implementation libs.paging.runtime.ktx
    implementation libs.paging.compose
    implementation libs.appcompat

    implementation libs.datastore

    implementation libs.security.crypto

    implementation libs.google.material

    implementation libs.google.protobuf.javalite
    implementation libs.google.protobuf.kotlinlite

    implementation libs.google.maps.compose
    implementation libs.google.maps.compose.utils
    implementation libs.google.maps.compose.widgets
    implementation libs.google.maps.ktx
    implementation libs.google.maps.play.services

    implementation libs.google.play.services.location
    implementation libs.google.play.services.oss

    implementation libs.google.accompanist.navigation
    implementation libs.google.accompanist.pager
    implementation libs.google.accompanist.pager.ind
    implementation libs.google.accompanist.permissions
    implementation libs.google.accompanist.webview

    implementation libs.nga.gars
    implementation libs.nga.mgrs
    implementation libs.nga.geo.android.map

    implementation libs.coil.kt.compose

    implementation(libs.stanford.corenlp) {
        exclude group: 'org.hamcrest'
        exclude group: 'junit'
        exclude group: 'com.sun.xml.bind'
        exclude group: 'com.google.protobuf'
    }

    implementation libs.matomo

    implementation libs.tracing

    testImplementation libs.junit4
    testImplementation project(':testing')
    androidTestImplementation libs.test.junit
    androidTestImplementation libs.compose.ui.test.junit4
    androidTestImplementation project(':testing')
    debugImplementation libs.compose.ui.tooling
    debugImplementation libs.compose.ui.test.manifest

    testImplementation libs.kotlinx.coroutines.test
    testImplementation libs.mockk
    testImplementation libs.square.mockwebserver

    androidTestImplementation libs.mockk.android
    androidTestImplementation libs.paging.testing
    androidTestImplementation libs.work.testing
}